// package slcan

// import (
// 	"fmt"
// 	"gocg/cybergear"
// 	"strconv"
// )

// type slCANFrame struct {
// 	framebuffer [CYBERGEAR_FRAME_SIZE]byte
// }

// func (f *slCANFrame) Handle(frameBuffer []byte) error {

// 	if len(frameBuffer) != CYBERGEAR_FRAME_SIZE {
// 		return fmt.Errorf("Invalid frame received : %+v", frameBuffer)
// 	}

// 	var slCANFrameSize int
// 	if len(frameBuffer) > 0 {
// 		switch CANFrameType(frameBuffer[CAN_FRAME_TYPE_INDEX]) {
// 		case EXTENDED_FRAME:
// 			slCANFrameSize = CYBERGEAR_FRAME_SIZE
// 		case STANDARD_FRAME:
// 			return fmt.Errorf("")
// 		case EXTENDED_RTR_FRAME:
// 			slCANFrameSize = CYBERGEAR_FRAME_SIZE
// 		case STANDARD_RTR_FRAME:
// 			slCANFrameSize = 22
// 		}
// 	}

// 	if slCANFrameSize == 0 {
// 		return nil // Not every action will result in a response frame
// 	}

// 	if slCANFrameSize != CYBERGEAR_FRAME_SIZE {
// 		return fmt.Errorf("so far, we're only playing with cybergear extended SLCAN frames of %d characters", CYBERGEAR_FRAME_SIZE)
// 	}

// 	cgFrameType, err := strconv.ParseInt(string(frameBuffer[CYBERGEAR_FRAME_TYPE_INDEX:CYBERGEAR_FRAME_TYPE_INDEX+2]), 16, 16)
// 	if err != nil {
// 		return err
// 	}

// 	switch cgFrameType {
// 	case int64(cybergear.COMMUNICATION_FETCH_DEVICE_ID): // Motor broadcast frame
// 		return fmt.Errorf(">>>> small TODO here - don't forget to unmarshal broadcast frames <<<<")
// 	case int64(cybergear.COMMUNICATION_STATUS_REPORT):
// 		f := MotorFeedback{}
// 		err = f.Unmarshal(frameBuffer)
// 		if err != nil {
// 			return err
// 		}
// 	}
// 	return fmt.Errorf("unexpected cybergear frame type : %d", cgFrameType)

// }
